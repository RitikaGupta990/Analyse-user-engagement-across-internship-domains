{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNdm5z4znaOQ7H84MZ057S9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RitikaGupta990/Analyse-user-engagement-across-internship-domains/blob/main/student%20success%20prediction%20model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BvxPw_DfIYmd",
        "outputId": "2111a1b4-0b7f-4d4d-fcd2-635473a9639f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-3357351b-5c1a-4523-b752-8f2dc1c09148\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-3357351b-5c1a-4523-b752-8f2dc1c09148\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving student_internship_data.csv to student_internship_data (1).csv\n",
            "✅ Data Loaded. First 5 rows:\n",
            "   student_id department  year_of_study  cgpa  projects_done  \\\n",
            "0         101        CSE              3   8.1              2   \n",
            "1         102        ECE              2   7.4              1   \n",
            "2         103        EEE              4   8.5              3   \n",
            "3         104       MECH              3   6.8              1   \n",
            "4         105        CSE              4   9.0              4   \n",
            "\n",
            "   internship_hours  certifications  attendance_percentage  success  \n",
            "0               120               1                     85        1  \n",
            "1                80               0                     78        0  \n",
            "2               150               1                     92        1  \n",
            "3                60               0                     70        0  \n",
            "4               180               2                     96        1  \n",
            "\n",
            "🔍 Training: Logistic Regression\n",
            "✅ Accuracy: 1.0\n",
            "✅ Precision: 1.0\n",
            "✅ Recall: 1.0\n",
            "📊 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         1\n",
            "           1       1.00      1.00      1.00         1\n",
            "\n",
            "    accuracy                           1.00         2\n",
            "   macro avg       1.00      1.00      1.00         2\n",
            "weighted avg       1.00      1.00      1.00         2\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔍 Training: Random Forest\n",
            "✅ Accuracy: 1.0\n",
            "✅ Precision: 1.0\n",
            "✅ Recall: 1.0\n",
            "📊 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         1\n",
            "           1       1.00      1.00      1.00         1\n",
            "\n",
            "    accuracy                           1.00         2\n",
            "   macro avg       1.00      1.00      1.00         2\n",
            "weighted avg       1.00      1.00      1.00         2\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhcAAAHHCAYAAAAMD3r6AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAOrRJREFUeJzt3XlclOX+//H3gDIgGi4IqJEYmrtoqETlGoXLIU1T03MSl8rcMtFKOilaKeVS/nLJ0kxPfU3L1ENqppFmi2m5tJrllh6PoLiLOijcvz96MKcRUJD7doR5Pc/jfjzymmuu6zNzBvjM57ru+7YZhmEIAADAJF7uDgAAAJQuJBcAAMBUJBcAAMBUJBcAAMBUJBcAAMBUJBcAAMBUJBcAAMBUJBcAAMBUJBcAAMBUJBewRL9+/RQWFubuMHCDunTpkp5++mmFhobKy8tLXbt2NX2Otm3bqm3btqaPW1ItWLBANptN+/fvd3co8AAkFyVc7i+M3KNMmTKqUaOG+vXrp0OHDrk7vBvG5e/TX48xY8a4O7x8TZo0SStWrLBs/AsXLujVV19VVFSUAgIC5Ovrq9tuu03Dhg3Tb7/9Ztm8kjR//nxNmTJFDz74oBYuXKiRI0daOt/1tGHDBudn69133823z1133SWbzaZGjRpd0xyzZ8/WggULihElYK0y7g4A5nj++edVq1YtXbhwQd98840WLFigL7/8Uj/99JN8fX3dHd4NI/d9+qtr/QVvtUmTJunBBx+05Ft9RkaGOnTooK1bt+pvf/ub+vTpo/Lly2vXrl1avHix3nzzTWVlZZk+b67PPvtMNWrU0KuvvmrZHGvXrrVs7MLw9fXVokWL9I9//MOlff/+/fr666+L9XM5e/ZsBQYGql+/foV+zsMPP6yHHnpIdrv9mucFCovkopTo2LGjmjdvLkl65JFHFBgYqJdfflkpKSnq2bOnm6O7cfz1fTJTZmam/P39TR/XKv369dP27du1dOlSde/e3eWxF154Qf/85z8tnf/IkSOqWLGipXP4+PhYOv7VdOrUSSkpKcrIyFBgYKCzfdGiRQoODladOnV04sQJy+PI/Wx6e3vL29vb8vkAiWWRUqtVq1aSpD179jjbsrKyNG7cOEVGRiogIED+/v5q1aqV1q9f7/Lc/fv3y2azaerUqXrzzTcVHh4uu92uFi1a6Ntvv80z14oVK9SoUSP5+vqqUaNGWr58eb4xZWZmatSoUQoNDZXdblfdunU1depUXX5jXpvNpmHDhumDDz5QgwYN5Ofnp+joaP3444+SpDfeeEO1a9eWr6+v2rZta+oa8meffaZWrVrJ399fFStWVJcuXbRz506XPuPHj5fNZtMvv/yiPn36qFKlSrr77rudj7/77ruKjIyUn5+fKleurIceekgHDx50GeP3339X9+7dFRISIl9fX91888166KGHdOrUKed7kJmZqYULFzpL7EX5lnolmzdv1qpVqzRw4MA8iYUk2e12TZ069Zrfl927d6tfv36qWLGiAgIC1L9/f507d07S/z5b69ev188//+x8bRs2bHAuJ2zYsMFl3Nzn/HUZIC0tTf3799fNN98su92uatWqqUuXLi6fhfz2XBw5ckQDBw5UcHCwfH19FRERoYULF+Y7X2E//wXp0qWL7Ha7PvjgA5f2RYsWqWfPnvn+oX/77bfVvn17BQUFyW63q0GDBnr99ddd+oSFhennn3/W559/7nz/cl9n7vLf559/riFDhigoKEg333yzy2O579Fnn30mLy8vjRs3Lk98Npstz7xAUVC5KKVyf4FUqlTJ2Xb69GnNmzdPvXv31qOPPqozZ87orbfeUmxsrLZs2aKmTZu6jLFo0SKdOXNGgwYNks1m0+TJk9WtWzft3btXZcuWlfRn6bl79+5q0KCBkpOTdezYMecv/b8yDEP333+/1q9fr4EDB6pp06b65JNP9NRTT+nQoUN5yuNffPGFUlJSNHToUElScnKy/va3v+npp5/W7NmzNWTIEJ04cUKTJ0/WgAED9NlnnxXqfTl16pQyMjJc2nK/VX766afq2LGjbr31Vo0fP17nz5/XjBkzdNddd2nbtm15Nqj26NFDderU0aRJk5wJ0sSJEzV27Fj17NlTjzzyiI4ePaoZM2aodevW2r59uypWrKisrCzFxsbK4XBo+PDhCgkJ0aFDh7Ry5UqdPHlSAQEBeuedd/TII4+oZcuWeuyxxyRJ4eHhhXqNV5OSkiLpzzJ5YRT1fenZs6dq1aql5ORkbdu2TfPmzVNQUJBefvllVa1aVe+8844mTpyos2fPKjk5WZJUv379PMnKlXTv3l0///yzhg8frrCwMB05ckTr1q3TgQMHCtxIfP78ebVt21a7d+/WsGHDVKtWLX3wwQfq16+fTp48qREjRrj0L8zn/0rKlSunLl266L333tPgwYMlSd9//71+/vlnzZs3Tz/88EOe57z++utq2LCh7r//fpUpU0YfffSRhgwZopycHOfPwvTp0zV8+HCVL1/eWWEKDg52GWfIkCGqWrWqxo0bp8zMzHzja9++vYYMGaLk5GR17dpVt99+uw4fPqzhw4crJiZGjz/++FVfI1AgAyXa22+/bUgyPv30U+Po0aPGwYMHjaVLlxpVq1Y17Ha7cfDgQWffS5cuGQ6Hw+X5J06cMIKDg40BAwY42/bt22dIMqpUqWIcP37c2f7vf//bkGR89NFHzramTZsa1apVM06ePOlsW7t2rSHJqFmzprNtxYoVhiTjxRdfdJn/wQcfNGw2m7F7925nmyTDbrcb+/btc7a98cYbhiQjJCTEOH36tLM9MTHRkOTS90rvU37HX19LUFCQcezYMWfb999/b3h5eRl9+/Z1tiUlJRmSjN69e7vMsX//fsPb29uYOHGiS/uPP/5olClTxtm+fft2Q5LxwQcfXDFmf39/Iz4+/op9rsUDDzxgSDJOnDhRqP5FfV/++lnKna9KlSoubW3atDEaNmzo0rZ+/XpDkrF+/XqX9tzP49tvv20Yxp+fWUnGlClTrhh3mzZtjDZt2jj/PX36dEOS8e677zrbsrKyjOjoaKN8+fLOz1VRPv/5yX0dH3zwgbFy5UrDZrMZBw4cMAzDMJ566inj1ltvLfA9OHfuXJ7xYmNjnc/J1bBhQ5fXliv3c3733Xcbly5dyvexv/6sZGZmGrVr1zYaNmxoXLhwwejcubNx0003GX/88ccVXyNwNSyLlBIxMTGqWrWqQkND9eCDD8rf318pKSkuFQRvb2/nOnROTo6OHz+uS5cuqXnz5tq2bVueMXv16uVS+chdatm7d68k6fDhw9qxY4fi4+MVEBDg7HfvvfeqQYMGLmOtXr1a3t7eeuKJJ1zaR40aJcMw9PHHH7u033PPPS7fQKOioiT9+Y21QoUKedpzY7qaWbNmad26dS7HX19Lv379VLlyZWf/Jk2a6N5779Xq1avzjHX5N7tly5YpJydHPXv2VEZGhvMICQlRnTp1nMtPue/VJ5984lwuuJ5Onz4tSS7vY0HMeF9atWqlY8eOOectLj8/P/n4+GjDhg1F2rOwevVqhYSEqHfv3s62smXL6oknntDZs2f1+eefu/S/2ue/MO677z5VrlxZixcvlmEYWrx4scv8l/Pz83P+d26VrU2bNtq7d69zyawwHn300ULtryhXrpwWLFignTt3qnXr1lq1apVeffVV3XLLLYWeC8gPyUUpkftHc+nSperUqZMyMjLy3RW+cOFCNWnSRL6+vqpSpYqqVq2qVatW5fuL6/JfMLm/aHN/of/xxx+SpDp16uR5bt26dV3+/ccff6h69ep5/qDVr1/fZayC5s79gxwaGppve2H/yLRs2VIxMTEux1/nvzzu3BgzMjLylJcvP+vk999/l2EYqlOnjqpWrepy7Ny5U0eOHHE+LyEhQfPmzVNgYKBiY2M1a9asIv3xuFxaWprLcf78+QL73nTTTZKkM2fOXHXca3lfrva5KS673a6XX35ZH3/8sYKDg9W6dWtNnjxZaWlpV3zeH3/8oTp16sjLy/XXXmE/g9fyOsqWLasePXpo0aJF2rhxow4ePKg+ffoU2P+rr75STEyMc29L1apV9eyzz0pSkT4fl382r+Suu+7S4MGDtWXLFsXGxmrAgAGFfi5QEJKLUiL3j2b37t2VkpKiRo0aqU+fPjp79qyzz7vvvqt+/fopPDxcb731ltasWaN169apffv2ysnJyTNmQd98jMs2YFqhoLndGdPl/votU/qzGmSz2Zzv6+XHG2+84ew7bdo0/fDDD3r22Wd1/vx5PfHEE2rYsKH+85//XFMs1apVczmWLFlSYN969epJknODrNmu9f8jm82Wb3t2dnaetieffFK//fabkpOT5evrq7Fjx6p+/fravn170QMugFmftT59+mjHjh0aP368IiIi8lT1cu3Zs0f33HOPMjIy9Morr2jVqlVat26d8xog+f2MFuTyz+aVOBwO5ybaPXv2uKWahtKH5KIU8vb2VnJysv773/9q5syZzvalS5fq1ltv1bJly/Twww8rNjZWMTExunDhwjXNU7NmTUl/fmO/3K5du/L0/e9//5vn2/Kvv/7qMpa75M5/edzSnzEGBgZe9VTT8PBwGYahWrVq5amOxMTE6I477nDp37hxYz333HPauHGjvvjiCx06dEhz5sxxPl7QH9v8XJ7IxMbGFtg3Li5Okgq8wNNfmfG+FFZuZeDkyZMu7ZdXFHKFh4dr1KhRWrt2rX766SdlZWVp2rRpBY5fs2ZN/f7773n+SFv9Gbz7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4ECjd+/ehmEYRmJiotGgQQOXx5955pk8YwEo/dhzAVxnK1euVPny5XXx4kXl5OSoT58+Gj9+vIYOHarGjRu77LP4/vvvtXv3blWoUMFljAsXLmjPnj06deqUDh8+7HIr+zJlyqh58+Z5lkZy7dixQ97e3mrTpk2hY969e7fOnTune++916U9KytLzZo1kyTt3LnTJQ5Jio6OLvQcAEoPkgvgOmvXrp1ef/11+fj4qHr16ipT5n8/hv7+/i59z549q8jISP3f//1fnnGqVq16TfP7+fkV+Tlnz56VJK1atUo1atRwecxut19THABKL5IL4Drz9/dX7dq1C9X39ttv15IlSxQUFKSbbrop3z7VqlXT5s2b1bp1a0nSpUuXtHXrVt1+++359m/cuLFycnL0+eefKyYmJs/juZWT7OxsZ1uDBg1kt9t14MCBAise9evXV0pKikvbN998c/UXCaDUYUMncAP7+9//rsDAQHXp0kVffPGF9u3bpw0bNuiJJ57Qf/7zH0nSiBEj9NJLL2nFihX69ddfNWTIkCteoyIsLEzx8fEaMGCAVqxY4Rzz/ffflyTVrFlTNptNK1eu1NGjR3X27FlVqFBBo0eP1siRI7Vw4ULt2bNH27Zt04wZM7Rw4UJJ0uOPP67ff/9dTz31lHbt2qVFixZpwYIFVr9FAG5AJBfADaxcuXLauHGjbrnlFnXr1k3169fXwIEDdeHCBWclY9SoUXr44YcVHx+v6OhoVahQQQ888MAVx3399df14IMPasiQIapXr54effRRZWZmSpJq1KihCRMmaMyYMQoODtawYcMkSS+88ILGjh2r5ORk1a9fXx06dNCqVatUq1YtSdItt9yiDz/8UCtWrFBERITmzJmjSZMmWfjuALhR2YyCdn0BAABcAyoXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVCQXAADAVP8fNWsdfV2HcZYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔍 Training: SVM\n",
            "✅ Accuracy: 1.0\n",
            "✅ Precision: 1.0\n",
            "✅ Recall: 1.0\n",
            "📊 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         1\n",
            "           1       1.00      1.00      1.00         1\n",
            "\n",
            "    accuracy                           1.00         2\n",
            "   macro avg       1.00      1.00      1.00         2\n",
            "weighted avg       1.00      1.00      1.00         2\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Step 1: Install & Import Required Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 2: Upload Dataset\n",
        "from google.colab import files\n",
        "uploaded = files.upload()  # Choose your student_internship_data.csv file\n",
        "\n",
        "# Step 3: Load Dataset\n",
        "df = pd.read_csv(next(iter(uploaded)))  # Automatically picks uploaded file\n",
        "print(\"✅ Data Loaded. First 5 rows:\")\n",
        "print(df.head())\n",
        "\n",
        "# Step 4: Handle Missing Values (if any)\n",
        "df.fillna(df.mode().iloc[0], inplace=True)\n",
        "\n",
        "# Step 5: Encode Categorical Columns\n",
        "label_encoders = {}\n",
        "for column in df.select_dtypes(include='object').columns:\n",
        "    le = LabelEncoder()\n",
        "    df[column] = le.fit_transform(df[column])\n",
        "    label_encoders[column] = le\n",
        "\n",
        "# Step 6: Feature and Target Split\n",
        "# Replace 'success' with the correct column name if different\n",
        "X = df.drop(columns=['success'])\n",
        "y = df['success']\n",
        "\n",
        "# Step 7: Normalize Features\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Step 8: Train-Test Split (stratify to keep class balance)\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "# Step 9: Train and Evaluate Models\n",
        "models = {\n",
        "    'Logistic Regression': LogisticRegression(),\n",
        "    'Random Forest': RandomForestClassifier(),\n",
        "    'SVM': SVC()\n",
        "}\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"\\n🔍 Training: {name}\")\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    print(\"✅ Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "    print(\"✅ Precision:\", precision_score(y_test, y_pred, average='binary', zero_division=0))\n",
        "    print(\"✅ Recall:\", recall_score(y_test, y_pred, average='binary', zero_division=0))\n",
        "    print(\"📊 Classification Report:\\n\", classification_report(y_test, y_pred, zero_division=0))\n",
        "\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.title(f\"{name} - Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "    plt.show()\n"
      ]
    }
  ]
}